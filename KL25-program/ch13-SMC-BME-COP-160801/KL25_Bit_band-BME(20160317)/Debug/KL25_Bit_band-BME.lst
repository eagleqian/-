
KL25_Bit_band-BME.elf:     file format elf32-littlearm
KL25_Bit_band-BME.elf
architecture: arm, flags 0x00000012:
EXEC_P, HAS_SYMS
start address 0x00000411

Program Header:
    LOAD off    0x000000b4 vaddr 0x00000000 paddr 0x00000000 align 2**2
         filesz 0x000000c0 memsz 0x000000c0 flags r--
    LOAD off    0x00000174 vaddr 0x00000400 paddr 0x00000400 align 2**0
         filesz 0x00000010 memsz 0x00000010 flags r--
    LOAD off    0x00000184 vaddr 0x00000410 paddr 0x00000410 align 2**2
         filesz 0x000002dc memsz 0x000002dc flags r-x
    LOAD off    0x00000460 vaddr 0x1ffff000 paddr 0x1ffff000 align 2**0
         filesz 0x00000000 memsz 0x00000800 flags rw-
private flags = 5000002: [Version5 EABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .interrupts   000000c0  00000000  00000000  000000b4  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .flash_config 00000010  00000400  00000400  00000174  2**0  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000002dc  00000410  00000410  00000184  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .heap         00000400  1ffff000  1ffff000  00000460  2**0  ALLOC
  4 .stack        00000400  1ffff400  1ffff400  00000460  2**0  ALLOC
  5 .ARM.attributes 00000030  00000000  00000000  00000460  2**0  CONTENTS, READONLY
  6 .debug_info   00000923  00000000  00000000  00000490  2**0  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000020c  00000000  00000000  00000db3  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000090  00000000  00000000  00000fc0  2**3  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000040  00000000  00000000  00001050  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  000095a6  00000000  00000000  00001090  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000a2d  00000000  00000000  0000a636  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000322e9  00000000  00000000  0000b063  2**0  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000070  00000000  00000000  0003d34c  2**0  CONTENTS, READONLY
 14 .debug_frame  000000c0  00000000  00000000  0003d3bc  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .interrupts	00000000 .interrupts
00000400 l    d  .flash_config	00000000 .flash_config
00000410 l    d  .text	00000000 .text
1ffff000 l    d  .heap	00000000 .heap
1ffff400 l    d  .stack	00000000 .stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./03_MCU/startup_MKL25Z4.o
00000000 l    df *ABS*	00000000 isr.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 system_MKL25Z4.c
00000000 l    df *ABS*	00000000 
00000400 l       *ABS*	00000000 STACK_SIZE
1ffff400 l       .heap	00000000 __HeapLimit
00000400 l       *ABS*	00000000 HEAP_SIZE
000006ec l       .text	00000000 __DATA_ROM
20002c00 l       *ABS*	00000000 __StackLimit
1ffff000 g       .heap	00000000 __HeapBase
1ffff000 g       .text	00000000 __data_start__
00000454  w    F .text	00000004 I2C0_IRQHandler
00000454  w    F .text	00000004 HardFault_Handler
00000454  w    F .text	00000004 SysTick_Handler
00000454  w    F .text	00000004 PendSV_Handler
00000454  w    F .text	00000004 NMI_Handler
000006ec g       .text	00000000 __exidx_end
00000454  w    F .text	00000004 I2C1_IRQHandler
00000464 g     F .text	00000008 UART1_IRQHandler
000006ec g       .text	00000000 __etext
00000454  w    F .text	00000004 DMA2_IRQHandler
00000454  w    F .text	00000004 TPM0_IRQHandler
00000454  w    F .text	00000004 LLWU_IRQHandler
00000454  w    F .text	00000004 TSI0_IRQHandler
0000045c g     F .text	00000008 UART0_IRQHandler
000006ec g       .text	00000000 __DTOR_END__
00000454  w    F .text	00000004 ADC0_IRQHandler
00000454  w    F .text	00000004 Reserved39_IRQHandler
1ffff000 g       .text	00000000 __START_BSS
1ffff000 g       .text	00000000 __bss_start__
00000454  w    F .text	00000004 SPI1_IRQHandler
00000454  w    F .text	00000004 DefaultISR
00000454  w    F .text	00000004 PORTD_IRQHandler
000006ec g       .text	00000000 __exidx_start
00000454  w    F .text	00000004 TPM2_IRQHandler
00000454  w    F .text	00000004 RTC_IRQHandler
00000410  w    F .text	00000044 Reset_Handler
00000454  w    F .text	00000004 RTC_Seconds_IRQHandler
00000454  w    F .text	00000004 MCG_IRQHandler
0000046c g     F .text	00000008 UART2_IRQHandler
1ffff000 g       .text	00000000 __data_end__
000006ec g       .text	00000000 __CTOR_LIST__
1ffff000 g       .text	00000000 __bss_end__
00000454  w    F .text	00000004 Reserved20_IRQHandler
00000454  w    F .text	00000004 USB0_IRQHandler
00000000 g       .interrupts	000000c0 __isr_vector
00000474 g     F .text	000000f0 main
00000454  w    F .text	00000004 PIT_IRQHandler
00000454  w    F .text	00000004 SVC_Handler
1ffff000 g       .text	00000000 __DATA_RAM
1ffff000 g       .heap	00000000 __end__
000006ec g       .text	00000000 __CTOR_END__
00000454  w    F .text	00000004 DMA3_IRQHandler
000006ec g       .text	00000000 __DTOR_LIST__
1ffff000 g       .text	00000000 __END_BSS
00000564 g     F .text	00000188 SystemInit
00000454  w    F .text	00000004 DMA0_IRQHandler
00000454  w    F .text	00000004 DAC0_IRQHandler
20003000 g       *ABS*	00000000 __StackTop
1ffff000 g       .text	00000000 _mtb_end
000006ec g       .text	00000000 __DATA_END
00000454  w    F .text	00000004 Reserved45_IRQHandler
00000454  w    F .text	00000004 TPM1_IRQHandler
00000454  w    F .text	00000004 LVD_LVW_IRQHandler
00000454  w    F .text	00000004 SPI0_IRQHandler
00000454  w    F .text	00000004 PORTA_IRQHandler
00000000 g       .interrupts	00000000 __VECTOR_TABLE
00000454  w    F .text	00000004 FTFA_IRQHandler
1ffff000 g       .text	00000000 _mtb_start
00000454  w    F .text	00000004 LPTMR0_IRQHandler
00000454  w    F .text	00000004 CMP0_IRQHandler
00000454  w    F .text	00000004 DMA1_IRQHandler



Disassembly of section .text:

00000410 <Reset_Handler>:
Reset_Handler():
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/startup_MKL25Z4.S:117
    .align 2
    .globl   Reset_Handler
    .weak    Reset_Handler
    .type    Reset_Handler, %function
Reset_Handler:
    cpsid   i               /* 屏蔽中断 */
 410:	b672      	cpsid	i
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/startup_MKL25Z4.S:119
#ifndef __NO_SYSTEM_INIT
    bl SystemInit           /* 跳转到系统初始化函数，在system_MKL25Z4.c中 */
 412:	f000 f8a7 	bl	564 <SystemInit>
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/startup_MKL25Z4.S:121
#endif
    cpsie   i               /* 解除屏蔽中断 */
 416:	b662      	cpsie	i
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/startup_MKL25Z4.S:127

/*     把数据从ROM复制到RAM中。需要在连接文件中定义如下的标志。
 *
 *      __etext: 代码段结束标志, 比如： begin of data sections to copy from.
 *      __data_start__/__data_end__: 数据需要复制到的RAM地址范围。边界必须4字节对齐  */
    ldr    r1, =__etext
 418:	4909      	ldr	r1, [pc, #36]	; (440 <Reset_Handler+0x30>)
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/startup_MKL25Z4.S:128
    ldr    r2, =__data_start__
 41a:	4a0a      	ldr	r2, [pc, #40]	; (444 <Reset_Handler+0x34>)
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/startup_MKL25Z4.S:129
    ldr    r3, =__data_end__
 41c:	4b0a      	ldr	r3, [pc, #40]	; (448 <Reset_Handler+0x38>)
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/startup_MKL25Z4.S:131

    subs    r3, r2
 41e:	1a9b      	subs	r3, r3, r2
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/startup_MKL25Z4.S:132
    ble     .LC0
 420:	dd03      	ble.n	42a <Reset_Handler+0x1a>
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/startup_MKL25Z4.S:135

.LC1:
    subs    r3, 4
 422:	3b04      	subs	r3, #4
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/startup_MKL25Z4.S:136
    ldr    r0, [r1,r3]
 424:	58c8      	ldr	r0, [r1, r3]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/startup_MKL25Z4.S:137
    str    r0, [r2,r3]
 426:	50d0      	str	r0, [r2, r3]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/startup_MKL25Z4.S:138
    bgt    .LC1
 428:	dcfb      	bgt.n	422 <Reset_Handler+0x12>
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/startup_MKL25Z4.S:150
 *
 *     清理BSS段需要在连接文件中定义如下的标志
 *      __bss_start__: bss段的起始标志，需要对其到4字节
 *      __bss_end__: bss段的结束标志. 需要对其到4字节
 */
    ldr r1, =__bss_start__
 42a:	4908      	ldr	r1, [pc, #32]	; (44c <Reset_Handler+0x3c>)
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/startup_MKL25Z4.S:151
    ldr r2, =__bss_end__
 42c:	4a08      	ldr	r2, [pc, #32]	; (450 <Reset_Handler+0x40>)
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/startup_MKL25Z4.S:153

    subs    r2, r1
 42e:	1a52      	subs	r2, r2, r1
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/startup_MKL25Z4.S:154
    ble .LC3
 430:	dd03      	ble.n	43a <Reset_Handler+0x2a>
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/startup_MKL25Z4.S:156

    movs    r0, 0
 432:	2000      	movs	r0, #0
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/startup_MKL25Z4.S:158
.LC2:
    str r0, [r1, r2]
 434:	5088      	str	r0, [r1, r2]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/startup_MKL25Z4.S:159
    subs    r2, 4
 436:	3a04      	subs	r2, #4
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/startup_MKL25Z4.S:160
    bge .LC2
 438:	dafc      	bge.n	434 <Reset_Handler+0x24>
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/startup_MKL25Z4.S:166
.LC3:
#endif
#ifndef __START
#define __START main
#endif
    bl    __START
 43a:	f000 f81b 	bl	474 <main>
 43e:	0000      	.short	0x0000
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/startup_MKL25Z4.S:127

/*     把数据从ROM复制到RAM中。需要在连接文件中定义如下的标志。
 *
 *      __etext: 代码段结束标志, 比如： begin of data sections to copy from.
 *      __data_start__/__data_end__: 数据需要复制到的RAM地址范围。边界必须4字节对齐  */
    ldr    r1, =__etext
 440:	000006ec 	.word	0x000006ec
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/startup_MKL25Z4.S:128
    ldr    r2, =__data_start__
 444:	1ffff000 	.word	0x1ffff000
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/startup_MKL25Z4.S:129
    ldr    r3, =__data_end__
 448:	1ffff000 	.word	0x1ffff000
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/startup_MKL25Z4.S:150
 *
 *     清理BSS段需要在连接文件中定义如下的标志
 *      __bss_start__: bss段的起始标志，需要对其到4字节
 *      __bss_end__: bss段的结束标志. 需要对其到4字节
 */
    ldr r1, =__bss_start__
 44c:	1ffff000 	.word	0x1ffff000
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/startup_MKL25Z4.S:151
    ldr r2, =__bss_end__
 450:	1ffff000 	.word	0x1ffff000

00000454 <ADC0_IRQHandler>:
I2C0_IRQHandler():
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/startup_MKL25Z4.S:175
    .align	1
    .thumb_func
    .weak DefaultISR
    .type DefaultISR, %function
DefaultISR:
    ldr	r0, =DefaultISR
 454:	4800      	ldr	r0, [pc, #0]	; (458 <ADC0_IRQHandler+0x4>)
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/startup_MKL25Z4.S:176
    bx r0
 456:	4700      	bx	r0
$d():
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/startup_MKL25Z4.S:175
    .align	1
    .thumb_func
    .weak DefaultISR
    .type DefaultISR, %function
DefaultISR:
    ldr	r0, =DefaultISR
 458:	00000455 	.word	0x00000455

0000045c <UART0_IRQHandler>:
UART0_IRQHandler():
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/isr.c:12
#include "includes.h"

//========================中断函数服务例程===============================
//串口0接收中断服务例程
void UART0_IRQHandler(void)
{
 45c:	b580      	push	{r7, lr}
 45e:	af00      	add	r7, sp, #0
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/isr.c:14

}
 460:	46bd      	mov	sp, r7
 462:	bd80      	pop	{r7, pc}

00000464 <UART1_IRQHandler>:
UART1_IRQHandler():
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/isr.c:19


//串口1接收中断服务例程
void UART1_IRQHandler(void)
{
 464:	b580      	push	{r7, lr}
 466:	af00      	add	r7, sp, #0
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/isr.c:21

}
 468:	46bd      	mov	sp, r7
 46a:	bd80      	pop	{r7, pc}

0000046c <UART2_IRQHandler>:
UART2_IRQHandler():
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/isr.c:25

//串口2接收中断服务例程
void UART2_IRQHandler(void)
{
 46c:	b580      	push	{r7, lr}
 46e:	af00      	add	r7, sp, #0
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/isr.c:27

}
 470:	46bd      	mov	sp, r7
 472:	bd80      	pop	{r7, pc}

00000474 <main>:
main():
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/main.c:8

#include "includes.h"   //包含总头文件


int main(void)
{
 474:	b580      	push	{r7, lr}
 476:	b084      	sub	sp, #16
 478:	af00      	add	r7, sp, #0
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/main.c:14
		unsigned long int temp,U32temp;
		unsigned char flag ;

		//BME操作外设寄存器,操作第16位
		//外设地址读一个字
		temp=(*( volatile unsigned long int *)(unsigned long int)0x400FF000);
 47a:	4b2c      	ldr	r3, [pc, #176]	; (52c <main+0xb8>)
 47c:	681b      	ldr	r3, [r3, #0]
 47e:	60fb      	str	r3, [r7, #12]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/main.c:16
		//改一个位
		temp=temp&(0xFFFEFFFF);
 480:	68fa      	ldr	r2, [r7, #12]
 482:	4b2b      	ldr	r3, [pc, #172]	; (530 <main+0xbc>)
 484:	4013      	ands	r3, r2
 486:	60fb      	str	r3, [r7, #12]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/main.c:18
		//外设地址写一个字
		(*( volatile unsigned long int *)(unsigned long int)0x400FF000)=temp;
 488:	4b28      	ldr	r3, [pc, #160]	; (52c <main+0xb8>)
 48a:	68fa      	ldr	r2, [r7, #12]
 48c:	601a      	str	r2, [r3, #0]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/main.c:20
		//BME清除一位
		U32temp=(*( volatile unsigned long int *)(unsigned long int) 0x4A0FF000);
 48e:	4b29      	ldr	r3, [pc, #164]	; (534 <main+0xc0>)
 490:	681b      	ldr	r3, [r3, #0]
 492:	60bb      	str	r3, [r7, #8]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/main.c:22
		//BME的AND操作
		(*( volatile unsigned long int *)(unsigned long int) 0x440FF000)=0xFFFEFFFF;
 494:	4b28      	ldr	r3, [pc, #160]	; (538 <main+0xc4>)
 496:	4a26      	ldr	r2, [pc, #152]	; (530 <main+0xbc>)
 498:	601a      	str	r2, [r3, #0]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/main.c:24

		flag=1;	//flag 用于选择一种控制PORTB19的方法
 49a:	1dfb      	adds	r3, r7, #7
 49c:	2201      	movs	r2, #1
 49e:	701a      	strb	r2, [r3, #0]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/main.c:25
		switch (flag)
 4a0:	1dfb      	adds	r3, r7, #7
 4a2:	781b      	ldrb	r3, [r3, #0]
 4a4:	2b02      	cmp	r3, #2
 4a6:	d01d      	beq.n	4e4 <main+0x70>
 4a8:	dc02      	bgt.n	4b0 <main+0x3c>
 4aa:	2b01      	cmp	r3, #1
 4ac:	d005      	beq.n	4ba <main+0x46>
 4ae:	e03a      	b.n	526 <main+0xb2>
 4b0:	2b03      	cmp	r3, #3
 4b2:	d022      	beq.n	4fa <main+0x86>
 4b4:	2b04      	cmp	r3, #4
 4b6:	d02a      	beq.n	50e <main+0x9a>
 4b8:	e035      	b.n	526 <main+0xb2>
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/main.c:30
		{
			case 1:
				//*************1.通常方法********************************
				//将引脚复用为GPIO引脚
				PORT_PCR_REG(PORTB_BASE_PTR, 19) |= PORT_PCR_MUX(1);
 4ba:	4b20      	ldr	r3, [pc, #128]	; (53c <main+0xc8>)
 4bc:	4a1f      	ldr	r2, [pc, #124]	; (53c <main+0xc8>)
 4be:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 4c0:	2180      	movs	r1, #128	; 0x80
 4c2:	0049      	lsls	r1, r1, #1
 4c4:	430a      	orrs	r2, r1
 4c6:	64da      	str	r2, [r3, #76]	; 0x4c
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/main.c:32
				//将数据方向寄存器的19位置1，定义PORTB19引脚为输出
				GPIOB_PDDR |=(1<<19);
 4c8:	4b1d      	ldr	r3, [pc, #116]	; (540 <main+0xcc>)
 4ca:	4a1d      	ldr	r2, [pc, #116]	; (540 <main+0xcc>)
 4cc:	6952      	ldr	r2, [r2, #20]
 4ce:	2180      	movs	r1, #128	; 0x80
 4d0:	0309      	lsls	r1, r1, #12
 4d2:	430a      	orrs	r2, r1
 4d4:	615a      	str	r2, [r3, #20]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/main.c:34
				//将输出寄存器的19位清0，使PORTB19引脚输出低电平
				GPIOB_PDOR &= ~(1<<19);
 4d6:	4b1a      	ldr	r3, [pc, #104]	; (540 <main+0xcc>)
 4d8:	4a19      	ldr	r2, [pc, #100]	; (540 <main+0xcc>)
 4da:	6811      	ldr	r1, [r2, #0]
 4dc:	4a19      	ldr	r2, [pc, #100]	; (544 <main+0xd0>)
 4de:	400a      	ands	r2, r1
 4e0:	601a      	str	r2, [r3, #0]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/main.c:35
				break;
 4e2:	e021      	b.n	528 <main+0xb4>
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/main.c:44
				//    只能使用数值地址进行传参。！！！
				//4.BME操作外设寄存器
				//PORTB_BASE_PTR->PCR[19]地址0x4004A04C
				//GPIOB_PDOR地址0x400FF054
				//GPIOB_PDDR地址0x400FF040
				BME_OR_IO(0x4004A04C,0xFFFFF1FF);
 4e4:	4b18      	ldr	r3, [pc, #96]	; (548 <main+0xd4>)
 4e6:	4a19      	ldr	r2, [pc, #100]	; (54c <main+0xd8>)
 4e8:	601a      	str	r2, [r3, #0]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/main.c:45
				BME_OR_IO(0x400FF054,0x00080000);
 4ea:	4b19      	ldr	r3, [pc, #100]	; (550 <main+0xdc>)
 4ec:	2280      	movs	r2, #128	; 0x80
 4ee:	0312      	lsls	r2, r2, #12
 4f0:	601a      	str	r2, [r3, #0]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/main.c:46
				BME_AND_IO(0x400FF040,0xFFF7FFFF);
 4f2:	4b18      	ldr	r3, [pc, #96]	; (554 <main+0xe0>)
 4f4:	4a13      	ldr	r2, [pc, #76]	; (544 <main+0xd0>)
 4f6:	601a      	str	r2, [r3, #0]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/main.c:47
				break;
 4f8:	e016      	b.n	528 <main+0xb4>
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/main.c:52
			case 3:
				//*************3.BME直接地址方法***************************
				//4.BME操作外设寄存器
				//通过LAS1操作将PORTB->PCR[19]复用为GPIO功能0x4E04A04C
				U32temp=(*( volatile unsigned long int *)(unsigned long int) 0x4C84A04C);
 4fa:	4b17      	ldr	r3, [pc, #92]	; (558 <main+0xe4>)
 4fc:	681b      	ldr	r3, [r3, #0]
 4fe:	60bb      	str	r3, [r7, #8]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/main.c:54
				//通过LAS1操作将数据方向寄存器的19位置1，定义PORTB19引脚为输出
				U32temp=(*( volatile unsigned long int *)(unsigned long int) 0x4E6FF054);
 500:	4b16      	ldr	r3, [pc, #88]	; (55c <main+0xe8>)
 502:	681b      	ldr	r3, [r3, #0]
 504:	60bb      	str	r3, [r7, #8]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/main.c:56
				//通过LAC1操作将输出寄存器的19位清0，使PORTB19引脚输出低电平
				U32temp=(*( volatile unsigned long int *)(unsigned long int) 0x4A6FF040);
 506:	4b16      	ldr	r3, [pc, #88]	; (560 <main+0xec>)
 508:	681b      	ldr	r3, [r3, #0]
 50a:	60bb      	str	r3, [r7, #8]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/main.c:57
				break;
 50c:	e00c      	b.n	528 <main+0xb4>
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/main.c:62
			case 4:
				//*************4.BME的OR方法***************************
				//5.BME操作外设寄存器
				//通过OR操作将PORTB->PCR[19]复用为GPIO功能0x4E04A04C
				(*( volatile unsigned long int *)(unsigned long int) 0x4804A04C)=0x00000100;
 50e:	4b0e      	ldr	r3, [pc, #56]	; (548 <main+0xd4>)
 510:	2280      	movs	r2, #128	; 0x80
 512:	0052      	lsls	r2, r2, #1
 514:	601a      	str	r2, [r3, #0]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/main.c:64
				//通过OR操作将数据方向寄存器的19位置1，定义PORTB19引脚为输出
				(*( volatile unsigned long int *)(unsigned long int) 0x480FF054)=0x00080000;
 516:	4b0e      	ldr	r3, [pc, #56]	; (550 <main+0xdc>)
 518:	2280      	movs	r2, #128	; 0x80
 51a:	0312      	lsls	r2, r2, #12
 51c:	601a      	str	r2, [r3, #0]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/main.c:66
				//通过AND操作将输出寄存器的19位清0，使PORTB19引脚输出高电平
				(*( volatile unsigned long int *)(unsigned long int) 0x440FF040)=0xFFF7FFFF;
 51e:	4b0d      	ldr	r3, [pc, #52]	; (554 <main+0xe0>)
 520:	4a08      	ldr	r2, [pc, #32]	; (544 <main+0xd0>)
 522:	601a      	str	r2, [r3, #0]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/main.c:67
				break;
 524:	e000      	b.n	528 <main+0xb4>
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/main.c:69
			default:
				break;
 526:	46c0      	nop			; (mov r8, r8)
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../08_Source/main.c:73 (discriminator 1)
		}
		for(;;)
		{
		}
 528:	e7fe      	b.n	528 <main+0xb4>
 52a:	46c0      	nop			; (mov r8, r8)
 52c:	400ff000 	.word	0x400ff000
 530:	fffeffff 	.word	0xfffeffff
 534:	4a0ff000 	.word	0x4a0ff000
 538:	440ff000 	.word	0x440ff000
 53c:	4004a000 	.word	0x4004a000
 540:	400ff040 	.word	0x400ff040
 544:	fff7ffff 	.word	0xfff7ffff
 548:	4804a04c 	.word	0x4804a04c
 54c:	fffff1ff 	.word	0xfffff1ff
 550:	480ff054 	.word	0x480ff054
 554:	440ff040 	.word	0x440ff040
 558:	4c84a04c 	.word	0x4c84a04c
 55c:	4e6ff054 	.word	0x4e6ff054
 560:	4a6ff040 	.word	0x4a6ff040

00000564 <SystemInit>:
SystemInit():
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:111
//函数名称：SystemInit
//函数返回：无
//参数说明：无
//功能概要：初始化系统的时钟
//===========================================================================
void SystemInit (void) {
 564:	b580      	push	{r7, lr}
 566:	af00      	add	r7, sp, #0
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:114

#if (DISABLE_WDOG)  //关闭看门狗
    SIM->COPC = (uint32_t)0x00u;    //SIM_COPC: COPT=0,COPCLKS=0,COPW=0
 568:	4a53      	ldr	r2, [pc, #332]	; (6b8 <SystemInit+0x154>)
 56a:	2388      	movs	r3, #136	; 0x88
 56c:	015b      	lsls	r3, r3, #5
 56e:	2100      	movs	r1, #0
 570:	50d1      	str	r1, [r2, r3]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:118
#endif

#ifdef CLOCK_SETUP
  if((RCM->SRS0 & RCM_SRS0_WAKEUP_MASK) != 0x00U)
 572:	4b52      	ldr	r3, [pc, #328]	; (6bc <SystemInit+0x158>)
 574:	781b      	ldrb	r3, [r3, #0]
 576:	b2db      	uxtb	r3, r3
 578:	1c1a      	adds	r2, r3, #0
 57a:	2301      	movs	r3, #1
 57c:	4013      	ands	r3, r2
 57e:	d00e      	beq.n	59e <SystemInit+0x3a>
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:120
  {
    if((PMC->REGSC & PMC_REGSC_ACKISO_MASK) != 0x00U)
 580:	4b4f      	ldr	r3, [pc, #316]	; (6c0 <SystemInit+0x15c>)
 582:	789b      	ldrb	r3, [r3, #2]
 584:	b2db      	uxtb	r3, r3
 586:	1c1a      	adds	r2, r3, #0
 588:	2308      	movs	r3, #8
 58a:	4013      	ands	r3, r2
 58c:	d007      	beq.n	59e <SystemInit+0x3a>
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:122
    {
       PMC->REGSC |= PMC_REGSC_ACKISO_MASK; /* 释放ACKISO */
 58e:	4b4c      	ldr	r3, [pc, #304]	; (6c0 <SystemInit+0x15c>)
 590:	4a4b      	ldr	r2, [pc, #300]	; (6c0 <SystemInit+0x15c>)
 592:	7892      	ldrb	r2, [r2, #2]
 594:	b2d2      	uxtb	r2, r2
 596:	2108      	movs	r1, #8
 598:	430a      	orrs	r2, r1
 59a:	b2d2      	uxtb	r2, r2
 59c:	709a      	strb	r2, [r3, #2]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:128
    }
  }

  /* 电源模式保护初始化 */
#ifdef SYSTEM_SMC_PMPROT_VALUE
  SMC->PMPROT = SYSTEM_SMC_PMPROT_VALUE;
 59e:	4b49      	ldr	r3, [pc, #292]	; (6c4 <SystemInit+0x160>)
 5a0:	222a      	movs	r2, #42	; 0x2a
 5a2:	701a      	strb	r2, [r3, #0]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:148
#if defined(SLOW_TRIM_ADDRESS)
  }
  #endif

  /* 设置系统预分频和时钟的值 */
  SIM->CLKDIV1 = SYSTEM_SIM_CLKDIV1_VALUE; /* Set system prescalers */
 5a4:	4a44      	ldr	r2, [pc, #272]	; (6b8 <SystemInit+0x154>)
 5a6:	4b48      	ldr	r3, [pc, #288]	; (6c8 <SystemInit+0x164>)
 5a8:	4948      	ldr	r1, [pc, #288]	; (6cc <SystemInit+0x168>)
 5aa:	50d1      	str	r1, [r2, r3]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:149
  SIM->SOPT1 = ((SIM->SOPT1) & (uint32_t)(~(SIM_SOPT1_OSC32KSEL_MASK))) | ((SYSTEM_SIM_SOPT1_VALUE) & (SIM_SOPT1_OSC32KSEL_MASK)); /* Set 32 kHz clock source (ERCLK32K) */
 5ac:	4b42      	ldr	r3, [pc, #264]	; (6b8 <SystemInit+0x154>)
 5ae:	4a42      	ldr	r2, [pc, #264]	; (6b8 <SystemInit+0x154>)
 5b0:	6812      	ldr	r2, [r2, #0]
 5b2:	21c0      	movs	r1, #192	; 0xc0
 5b4:	0309      	lsls	r1, r1, #12
 5b6:	430a      	orrs	r2, r1
 5b8:	601a      	str	r2, [r3, #0]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:150
  SIM->SOPT2 = ((SIM->SOPT2) & (uint32_t)(~(SIM_SOPT2_PLLFLLSEL_MASK))) | ((SYSTEM_SIM_SOPT2_VALUE) & (SIM_SOPT2_PLLFLLSEL_MASK)); /* Selects the high frequency clock for various peripheral clocking options. */
 5ba:	4a3f      	ldr	r2, [pc, #252]	; (6b8 <SystemInit+0x154>)
 5bc:	493e      	ldr	r1, [pc, #248]	; (6b8 <SystemInit+0x154>)
 5be:	4b44      	ldr	r3, [pc, #272]	; (6d0 <SystemInit+0x16c>)
 5c0:	58cb      	ldr	r3, [r1, r3]
 5c2:	2180      	movs	r1, #128	; 0x80
 5c4:	0249      	lsls	r1, r1, #9
 5c6:	4319      	orrs	r1, r3
 5c8:	4b41      	ldr	r3, [pc, #260]	; (6d0 <SystemInit+0x16c>)
 5ca:	50d1      	str	r1, [r2, r3]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:151
  SIM->SOPT2 = ((SIM->SOPT2) & (uint32_t)(~(SIM_SOPT2_TPMSRC_MASK))) | ((SYSTEM_SIM_SOPT2_VALUE) & (SIM_SOPT2_TPMSRC_MASK)); /* Selects the clock source for the TPM counter clock. */
 5cc:	4a3a      	ldr	r2, [pc, #232]	; (6b8 <SystemInit+0x154>)
 5ce:	493a      	ldr	r1, [pc, #232]	; (6b8 <SystemInit+0x154>)
 5d0:	4b3f      	ldr	r3, [pc, #252]	; (6d0 <SystemInit+0x16c>)
 5d2:	58c9      	ldr	r1, [r1, r3]
 5d4:	4b3f      	ldr	r3, [pc, #252]	; (6d4 <SystemInit+0x170>)
 5d6:	400b      	ands	r3, r1
 5d8:	2180      	movs	r1, #128	; 0x80
 5da:	0449      	lsls	r1, r1, #17
 5dc:	4319      	orrs	r1, r3
 5de:	4b3c      	ldr	r3, [pc, #240]	; (6d0 <SystemInit+0x16c>)
 5e0:	50d1      	str	r1, [r2, r3]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:185
  #endif

#else /* MCG_MODE */
  /* Set MCG and OSC */
  /* SIM_SCGC5: PORTA=1 */
  SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;
 5e2:	4a35      	ldr	r2, [pc, #212]	; (6b8 <SystemInit+0x154>)
 5e4:	4934      	ldr	r1, [pc, #208]	; (6b8 <SystemInit+0x154>)
 5e6:	4b3c      	ldr	r3, [pc, #240]	; (6d8 <SystemInit+0x174>)
 5e8:	58cb      	ldr	r3, [r1, r3]
 5ea:	2180      	movs	r1, #128	; 0x80
 5ec:	0089      	lsls	r1, r1, #2
 5ee:	4319      	orrs	r1, r3
 5f0:	4b39      	ldr	r3, [pc, #228]	; (6d8 <SystemInit+0x174>)
 5f2:	50d1      	str	r1, [r2, r3]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:187
  /* PORTA_PCR18: ISF=0,MUX=0 */
  PORTA_PCR18 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
 5f4:	4b39      	ldr	r3, [pc, #228]	; (6dc <SystemInit+0x178>)
 5f6:	4a39      	ldr	r2, [pc, #228]	; (6dc <SystemInit+0x178>)
 5f8:	6c91      	ldr	r1, [r2, #72]	; 0x48
 5fa:	4a39      	ldr	r2, [pc, #228]	; (6e0 <SystemInit+0x17c>)
 5fc:	400a      	ands	r2, r1
 5fe:	649a      	str	r2, [r3, #72]	; 0x48
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:190
  if (((SYSTEM_MCG_C2_VALUE) & MCG_C2_EREFS0_MASK) != 0x00U) {
  /* PORTA_PCR19: ISF=0,MUX=0 */
  PORTA_PCR19 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));
 600:	4b36      	ldr	r3, [pc, #216]	; (6dc <SystemInit+0x178>)
 602:	4a36      	ldr	r2, [pc, #216]	; (6dc <SystemInit+0x178>)
 604:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 606:	4a36      	ldr	r2, [pc, #216]	; (6e0 <SystemInit+0x17c>)
 608:	400a      	ands	r2, r1
 60a:	64da      	str	r2, [r3, #76]	; 0x4c
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:192
  }
  MCG->SC = SYSTEM_MCG_SC_VALUE;       /* Set SC (fast clock internal reference divider) */
 60c:	4b35      	ldr	r3, [pc, #212]	; (6e4 <SystemInit+0x180>)
 60e:	2200      	movs	r2, #0
 610:	721a      	strb	r2, [r3, #8]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:193
  MCG->C2 = (SYSTEM_MCG_C2_VALUE) & (uint8_t)(~(MCG_C2_LP_MASK)); /* Set C2 (freq. range, ext. and int. reference selection etc.; low power bit is set later) */
 612:	4b34      	ldr	r3, [pc, #208]	; (6e4 <SystemInit+0x180>)
 614:	2224      	movs	r2, #36	; 0x24
 616:	705a      	strb	r2, [r3, #1]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:194
  OSC0->CR = SYSTEM_OSC0_CR_VALUE;     /* Set OSC_CR (OSCERCLK enable, oscillator capacitor load) */
 618:	4b33      	ldr	r3, [pc, #204]	; (6e8 <SystemInit+0x184>)
 61a:	2280      	movs	r2, #128	; 0x80
 61c:	701a      	strb	r2, [r3, #0]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:196
  #if (MCG_MODE == MCG_MODE_PEE)
  MCG->C1 = (SYSTEM_MCG_C1_VALUE) | MCG_C1_CLKS(0x02); /* Set C1 (clock source selection, FLL ext. reference divider, int. reference enable etc.) - PBE mode*/
 61e:	4b31      	ldr	r3, [pc, #196]	; (6e4 <SystemInit+0x180>)
 620:	229a      	movs	r2, #154	; 0x9a
 622:	701a      	strb	r2, [r3, #0]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:201
  #else
  MCG->C1 = SYSTEM_MCG_C1_VALUE;       /* Set C1 (clock source selection, FLL ext. reference divider, int. reference enable etc.) */
  #endif
  if (((SYSTEM_MCG_C2_VALUE) & MCG_C2_EREFS0_MASK) != 0x00U) {
    while((MCG->S & MCG_S_OSCINIT0_MASK) == 0x00U) { /* Check that the oscillator is running */
 624:	46c0      	nop			; (mov r8, r8)
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:201 (discriminator 1)
 626:	4b2f      	ldr	r3, [pc, #188]	; (6e4 <SystemInit+0x180>)
 628:	799b      	ldrb	r3, [r3, #6]
 62a:	b2db      	uxtb	r3, r3
 62c:	1c1a      	adds	r2, r3, #0
 62e:	2302      	movs	r3, #2
 630:	4013      	ands	r3, r2
 632:	d0f8      	beq.n	626 <SystemInit+0xc2>
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:209
  /* Check that the source of the FLL reference clock is the requested one. */
  if (((SYSTEM_MCG_C1_VALUE) & MCG_C1_IREFS_MASK) != 0x00U) {
    while((MCG->S & MCG_S_IREFST_MASK) == 0x00U) {
    }
  } else {
    while((MCG->S & MCG_S_IREFST_MASK) != 0x00U) {
 634:	46c0      	nop			; (mov r8, r8)
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:209 (discriminator 1)
 636:	4b2b      	ldr	r3, [pc, #172]	; (6e4 <SystemInit+0x180>)
 638:	799b      	ldrb	r3, [r3, #6]
 63a:	b2db      	uxtb	r3, r3
 63c:	1c1a      	adds	r2, r3, #0
 63e:	2310      	movs	r3, #16
 640:	4013      	ands	r3, r2
 642:	d1f8      	bne.n	636 <SystemInit+0xd2>
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:212
    }
  }
  MCG->C4 = ((SYSTEM_MCG_C4_VALUE)  & (uint8_t)(~(MCG_C4_FCTRIM_MASK | MCG_C4_SCFTRIM_MASK))) | (MCG->C4 & (MCG_C4_FCTRIM_MASK | MCG_C4_SCFTRIM_MASK)); /* Set C4 (FLL output; trim values not changed) */
 644:	4b27      	ldr	r3, [pc, #156]	; (6e4 <SystemInit+0x180>)
 646:	4a27      	ldr	r2, [pc, #156]	; (6e4 <SystemInit+0x180>)
 648:	78d2      	ldrb	r2, [r2, #3]
 64a:	b2d1      	uxtb	r1, r2
 64c:	221f      	movs	r2, #31
 64e:	400a      	ands	r2, r1
 650:	b2d2      	uxtb	r2, r2
 652:	70da      	strb	r2, [r3, #3]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:218
#endif /* MCG_MODE */

  /* Common for all MCG modes */

  /* PLL clock can be used to generate clock for some devices regardless of clock generator (MCGOUTCLK) mode. */
  MCG->C5 = (SYSTEM_MCG_C5_VALUE) & (uint8_t)(~(MCG_C5_PLLCLKEN0_MASK)); /* Set C5 (PLL settings, PLL reference divider etc.) */
 654:	4b23      	ldr	r3, [pc, #140]	; (6e4 <SystemInit+0x180>)
 656:	2201      	movs	r2, #1
 658:	711a      	strb	r2, [r3, #4]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:219
  MCG->C6 = (SYSTEM_MCG_C6_VALUE) & (uint8_t)~(MCG_C6_PLLS_MASK); /* Set C6 (PLL select, VCO divider etc.) */
 65a:	4b22      	ldr	r3, [pc, #136]	; (6e4 <SystemInit+0x180>)
 65c:	2200      	movs	r2, #0
 65e:	715a      	strb	r2, [r3, #5]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:228
  /* BLPE, PEE and PBE MCG mode specific */

#if (MCG_MODE == MCG_MODE_BLPE)
  MCG->C2 |= (MCG_C2_LP_MASK);         /* Disable FLL and PLL in bypass mode */
#elif ((MCG_MODE == MCG_MODE_PBE) || (MCG_MODE == MCG_MODE_PEE))
  MCG->C6 |= (MCG_C6_PLLS_MASK);       /* Set C6 (PLL select, VCO divider etc.) */
 660:	4b20      	ldr	r3, [pc, #128]	; (6e4 <SystemInit+0x180>)
 662:	4a20      	ldr	r2, [pc, #128]	; (6e4 <SystemInit+0x180>)
 664:	7952      	ldrb	r2, [r2, #5]
 666:	b2d2      	uxtb	r2, r2
 668:	2140      	movs	r1, #64	; 0x40
 66a:	430a      	orrs	r2, r1
 66c:	b2d2      	uxtb	r2, r2
 66e:	715a      	strb	r2, [r3, #5]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:229
  while((MCG->S & MCG_S_LOCK0_MASK) == 0x00U) { /* Wait until PLL is locked*/
 670:	46c0      	nop			; (mov r8, r8)
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:229 (discriminator 1)
 672:	4b1c      	ldr	r3, [pc, #112]	; (6e4 <SystemInit+0x180>)
 674:	799b      	ldrb	r3, [r3, #6]
 676:	b2db      	uxtb	r3, r3
 678:	1c1a      	adds	r2, r3, #0
 67a:	2340      	movs	r3, #64	; 0x40
 67c:	4013      	ands	r3, r2
 67e:	d0f8      	beq.n	672 <SystemInit+0x10e>
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:232
  }
  #if (MCG_MODE == MCG_MODE_PEE)
  MCG->C1 &= (uint8_t)~(MCG_C1_CLKS_MASK);
 680:	4b18      	ldr	r3, [pc, #96]	; (6e4 <SystemInit+0x180>)
 682:	4a18      	ldr	r2, [pc, #96]	; (6e4 <SystemInit+0x180>)
 684:	7812      	ldrb	r2, [r2, #0]
 686:	b2d1      	uxtb	r1, r2
 688:	223f      	movs	r2, #63	; 0x3f
 68a:	400a      	ands	r2, r1
 68c:	b2d2      	uxtb	r2, r2
 68e:	701a      	strb	r2, [r3, #0]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:255
  }
#elif ((MCG_MODE == MCG_MODE_FBE) || (MCG_MODE == MCG_MODE_PBE) || (MCG_MODE == MCG_MODE_BLPE))
  while((MCG->S & MCG_S_CLKST_MASK) != 0x08U) { /* Wait until external reference clock is selected as MCG output */
  }
#elif (MCG_MODE == MCG_MODE_PEE)
  while((MCG->S & MCG_S_CLKST_MASK) != 0x0CU) { /* Wait until output of the PLL is selected */
 690:	46c0      	nop			; (mov r8, r8)
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:255 (discriminator 1)
 692:	4b14      	ldr	r3, [pc, #80]	; (6e4 <SystemInit+0x180>)
 694:	799b      	ldrb	r3, [r3, #6]
 696:	b2db      	uxtb	r3, r3
 698:	1c1a      	adds	r2, r3, #0
 69a:	230c      	movs	r3, #12
 69c:	4013      	ands	r3, r2
 69e:	2b0c      	cmp	r3, #12
 6a0:	d1f7      	bne.n	692 <SystemInit+0x12e>
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:271
    NVIC_EnableIRQ(MCG_IRQn);          /* Enable PLL loss of lock interrupt request */
  }
#endif

    //初始化后，开始PORT模块时钟
    SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK
 6a2:	4a05      	ldr	r2, [pc, #20]	; (6b8 <SystemInit+0x154>)
 6a4:	4904      	ldr	r1, [pc, #16]	; (6b8 <SystemInit+0x154>)
 6a6:	4b0c      	ldr	r3, [pc, #48]	; (6d8 <SystemInit+0x174>)
 6a8:	58cb      	ldr	r3, [r1, r3]
 6aa:	21f8      	movs	r1, #248	; 0xf8
 6ac:	0189      	lsls	r1, r1, #6
 6ae:	4319      	orrs	r1, r3
 6b0:	4b09      	ldr	r3, [pc, #36]	; (6d8 <SystemInit+0x174>)
 6b2:	50d1      	str	r1, [r2, r3]
C:\Users\Administrator\Desktop\KL25_Bit_band-BME(20160317)\Debug/../03_MCU/system_MKL25Z4.c:276
  			  | SIM_SCGC5_PORTB_MASK
  			  | SIM_SCGC5_PORTC_MASK
  			  | SIM_SCGC5_PORTD_MASK
  			  | SIM_SCGC5_PORTE_MASK;
}
 6b4:	46bd      	mov	sp, r7
 6b6:	bd80      	pop	{r7, pc}
 6b8:	40047000 	.word	0x40047000
 6bc:	4007f000 	.word	0x4007f000
 6c0:	4007d000 	.word	0x4007d000
 6c4:	4007e000 	.word	0x4007e000
 6c8:	00001044 	.word	0x00001044
 6cc:	10010000 	.word	0x10010000
 6d0:	00001004 	.word	0x00001004
 6d4:	fcffffff 	.word	0xfcffffff
 6d8:	00001038 	.word	0x00001038
 6dc:	40049000 	.word	0x40049000
 6e0:	fefff8ff 	.word	0xfefff8ff
 6e4:	40064000 	.word	0x40064000
 6e8:	40065000 	.word	0x40065000
